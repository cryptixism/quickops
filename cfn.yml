# OpenVpnStack

AWSTemplateFormatVersion: "2010-09-09"
Description: Template to create a Spot EC2 instance on Ubuntu with automated replacement and bootstrap scripts from a Git repo.

Parameters:
  KeyPairName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: "Key pair to access the instance."

  DomainName:
    Type: String
    Description: "The domain name."
    Default: "None"

  AfraidUpdateKey:
    Type: String
    Description: "The free dns domain name. Only the key from Dynamic DNS Direct URL."
    Default: "None"

  MaxSpotPrice:
    Type: String
    Description: "The maximum price you're willing to pay for the Spot Instance per hour. This may affect availability of the service."
    Default: "0.004"  # Default is minimum spot price for t3.micro

  LatestUbuntuAmi:
    Type: String
    Description: "The AMI ID for the latest Ubuntu version."
    Default: "/aws/service/canonical/ubuntu/server/24.10/stable/current/amd64/hvm/ebs-gp3/ami-id"  # Default value pointing to the specified Ubuntu AMI

Resources:
  # S3 bucket
  OpenVpnS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName:
        !Sub
          - "openvpn-bucket-${RandomGUID}"
          - { RandomGUID: !Select [0, !Split ["-", !Select [2, !Split ["/", !Ref AWS::StackId ]]]] }
      VersioningConfiguration:
        Status: Enabled

  # Create a new VPC
  OpenVpnVPC:
    Type: "AWS::EC2::VPC"
    Properties:
      CidrBlock: "10.50.0.0/16"  # CIDR block for the VPC
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: "Name"
          Value: "OpenVpnVPC"

  # Create an Internet Gateway
  OpenVpnInternetGateway:
    Type: "AWS::EC2::InternetGateway"
    Properties:
      Tags:
        - Key: "Name"
          Value: "OpenVpnInternetGateway"

  # Attach the Internet Gateway to the VPC
  InternetGatewayAttachment:
    Type: "AWS::EC2::VPCGatewayAttachment"
    Properties:
      VpcId: !Ref OpenVpnVPC
      InternetGatewayId: !Ref OpenVpnInternetGateway

  # Create 3 public subnets in different availability zones
  PublicSubnet1:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId: !Ref OpenVpnVPC
      CidrBlock: "10.50.1.0/24"  # First public subnet CIDR block
      AvailabilityZone: !Select [0, !GetAZs '']  # First AZ
      MapPublicIpOnLaunch: true  # Automatically assign public IPs

  PublicSubnet2:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId: !Ref OpenVpnVPC
      CidrBlock: "10.50.2.0/24"  # Second public subnet CIDR block
      AvailabilityZone: !Select [1, !GetAZs '']  # Second AZ
      MapPublicIpOnLaunch: true  # Automatically assign public IPs

  PublicSubnet3:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId: !Ref OpenVpnVPC
      CidrBlock: "10.50.3.0/24"  # Third public subnet CIDR block
      AvailabilityZone: !Select [2, !GetAZs '']  # Third AZ
      MapPublicIpOnLaunch: true  # Automatically assign public IPs

  # Create a route table for the public subnets
  PublicRouteTable:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref OpenVpnVPC  # Associate this route table with the same VPC
      Tags:
        - Key: "Name"
          Value: "PublicRouteTable"

  # Create a route to the Internet Gateway in the public route table
  PublicRoute:
    Type: "AWS::EC2::Route"
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: "0.0.0.0/0"  # Route all traffic to the internet
      GatewayId: !Ref OpenVpnInternetGateway  # Ensure this references the correct IGW

  # Associate the public route table with the public subnets
  PublicSubnet1RouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet2RouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet3RouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId: !Ref PublicSubnet3
      RouteTableId: !Ref PublicRouteTable

  # Security Group for the EC2 instance
  OpenVpnSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: "OpenVPN - Allow SSH and HTTP access"
      VpcId: !Ref OpenVpnVPC
      SecurityGroupIngress:
        - IpProtocol: "tcp"
          FromPort: 22
          ToPort: 22
          Description: "ssh"
          CidrIp: "0.0.0.0/0"
        - IpProtocol: "udp"
          FromPort: 1194
          ToPort: 1194
          Description: "OpenVPN UDP"
          CidrIp: "0.0.0.0/0"   
        - IpProtocol: "tcp"
          FromPort: 443
          ToPort: 443
          Description: "OpenVPN TCP"
          CidrIp: "0.0.0.0/0"   
        - IpProtocol: "tcp"
          FromPort: 943
          ToPort: 943
          Description: "OpenVPN Admin"
          CidrIp: "1.1.1.1/24"   

  # IAM Role for the Spot Instance
  OpenVpnSpotInstanceRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: "ec2.amazonaws.com"
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: "S3AccessPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "s3:GetObject"
                  - "s3:GetObjectVersion"
                  - "s3:PutObject"
                  - "s3:ListBucket"
                  - "s3:ListBucketVersions"
                Resource: 
                  - !Sub "${OpenVpnS3Bucket.Arn}/*"
                  - !Sub "${OpenVpnS3Bucket.Arn}"
  
  # Instance Profile that will associate the above IAM role with the EC2 instance
  OpenVpnSpotInstanceProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      Roles:
        - Ref: OpenVpnSpotInstanceRole

  # Launch Template for the EC2 Spot Instance
  OpenVpnSpotInstanceLaunchTemplate:
    Type: "AWS::EC2::LaunchTemplate"
    Properties:
      LaunchTemplateData:
        InstanceType: "t3.micro"
        KeyName: !Ref KeyPairName            # Use the key pair parameter
        IamInstanceProfile:
          Arn: !GetAtt OpenVpnSpotInstanceProfile.Arn  # Attach the IAM role
        ImageId: !Sub "{{resolve:ssm:${LatestUbuntuAmi}}}"  # Use SSM parameter to fetch the specified Ubuntu AMI ID
        BlockDeviceMappings:  # Specify EBS volume configuration
          - DeviceName: "/dev/xvda"
            Ebs:
              VolumeSize: 20  # Size in GB
              VolumeType: "gp3"  # Use gp3 EBS volume type
              DeleteOnTermination: true  # Delete volume on termination
        SecurityGroupIds:
          - !Ref OpenVpnSecurityGroup  # Attach the security group to the instance
        UserData:  # User data to bootstrap the instance
          Fn::Base64: !Sub |
            #!/bin/bash
            export afraid_update_key=${AfraidUpdateKey}
            export domain_name=${DomainName}
            export s3_bucket_arn=${OpenVpnS3Bucket.Arn}
            export s3_bucket_name=$s3_bucket_arn##*:
            export openvpn_data=/opt/openvpn/data
            export username=user1
            curl https://freedns.afraid.org/dynamic/update.php?$afraid_update_key
            curl -fsSL https://get.docker.com -o get-docker.sh
            sh ./get-docker.sh
            docker run -v $openvpn_data:/etc/openvpn --rm kylemanna/openvpn ovpn_genconfig -u udp://$domain_name
            docker run -v $openvpn_data:/etc/openvpn --rm -it kylemanna/openvpn ovpn_initpki
            docker run -v $openvpn_data:/etc/openvpn -d -p 1194:1194/udp --cap-add=NET_ADMIN kylemanna/openvpn
            docker run -v $openvpn_data:/etc/openvpn --rm -it kylemanna/openvpn easyrsa build-client-full $username nopass
            docker run -v $openvpn_data:/etc/openvpn --rm kylemanna/openvpn ovpn_getclient $username > $username.ovpn
            aws s3api put-object --bucket $s3_bucket_name --key $username.ovpn --body $username.ovpn

  # Auto Scaling Group to manage the Spot Instances
  SpotInstanceAutoScalingGroup:
    Type: "AWS::AutoScaling::AutoScalingGroup"
    Properties:
      MinSize: "1"  # Minimum size of the Auto Scaling Group
      MaxSize: "1"  # Maximum size of the Auto Scaling Group
      DesiredCapacity: "1"  # Desired count of instances is 1
      VPCZoneIdentifier:
        - !Ref PublicSubnet1  # Reference the first public subnet for instance placement
        - !Ref PublicSubnet2  # Reference the second public subnet for instance placement
        - !Ref PublicSubnet3  # Reference the third public subnet for instance placement
      MixedInstancesPolicy:
        LaunchTemplate:
          LaunchTemplateSpecification:
            LaunchTemplateId: !Ref OpenVpnSpotInstanceLaunchTemplate  # Reference the launch template
            Version: !GetAtt OpenVpnSpotInstanceLaunchTemplate.LatestVersionNumber  # Use the latest version of the Launch Template
          Overrides:
            - InstanceType: "t3.nano"
            - InstanceType: "t3.micro" 
            - InstanceType: "t3.medium" 
        InstancesDistribution:
          SpotAllocationStrategy: "lowest-price"  # Set allocation strategy to lowest price
          SpotMaxPrice: !Ref MaxSpotPrice  # Set the maximum price to match the parameter
          SpotInstancePools: 9  # Number of Spot instance pools to use
          OnDemandPercentageAboveBaseCapacity: 0  # Only use Spot instances
